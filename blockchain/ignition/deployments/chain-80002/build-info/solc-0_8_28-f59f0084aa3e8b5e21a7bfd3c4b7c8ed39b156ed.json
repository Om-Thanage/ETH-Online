{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-f59f0084aa3e8b5e21a7bfd3c4b7c8ed39b156ed",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/CredentialVerifier.sol": "project/contracts/CredentialVerifier.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/CredentialVerifier.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport \"./interfaces/ISkillNFT.sol\";\r\n\r\ncontract CredentialVerifier {\r\n    ISkillNFT public immutable skillNFT;\r\n\r\n    constructor(address _skillNFT) {\r\n        skillNFT = ISkillNFT(_skillNFT);\r\n    }\r\n\r\n    function isValid(uint256 tokenId) public view returns (bool) {\r\n        address user = skillNFT.userOf(tokenId);\r\n        if (user != address(0)) {\r\n            return skillNFT.userExpires(tokenId) > block.timestamp;\r\n        }\r\n        // For owned NFTs, check if token exists by checking if tokenId is valid\r\n        // Since we can't call ownerOf directly, we'll assume it's valid if no user is set\r\n        return true;\r\n    }\r\n\r\n    function getCredential(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address holder, string memory uri, uint64 expires, bool valid)\r\n    {\r\n        holder = skillNFT.userOf(tokenId);\r\n        if (holder == address(0)) {\r\n            // For owned NFTs, we can't get the owner through the interface\r\n            // This is a limitation of the current interface design\r\n            holder = address(0); // Will be set by frontend using direct contract calls\r\n        }\r\n        uri = \"\"; // URI not accessible through interface\r\n        expires = skillNFT.userExpires(tokenId);\r\n        valid = isValid(tokenId);\r\n    }\r\n}"
      },
      "project/contracts/interfaces/ISkillNFT.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\ninterface ISkillNFT {\r\n    function mintToUser(\r\n        address to,\r\n        string memory uri,\r\n        uint64 expires,\r\n        string memory skill\r\n    ) external returns (uint256);\r\n\r\n    function setUser(uint256 tokenId, address user, uint64 expires) external;\r\n    function userOf(uint256 tokenId) external view returns (address);\r\n    function userExpires(uint256 tokenId) external view returns (uint64);\r\n}"
      }
    }
  }
}